#cloud-config

coreos:
  etcd:
    # generate a new token for each unique cluster from https://discovery.etcd.io/new?size=3
    # WARNING: replace each time you 'vagrant destroy'
    discovery: https://discovery.etcd.io/9c6529037c966f9218c351e271760152
    addr: $public_ipv4:4001
    peer-addr: $public_ipv4:7001
  fleet:
    public-ip: $public_ipv4
  units:
    - name: etcd.service
      command: start
    - name: fleet.service
      command: start
    - name: docker.service
      drop-ins:
        - name: 50-consul-dns.conf
          content: |
            [Service]
            Environment='DOCKER_OPTS=--dns=$public_ipv4'
    - name: docker-tcp.socket
      command: start
      enable: true
      content: |
        [Unit]
        Description=Docker Socket for the API

        [Socket]
        ListenStream=2375
        Service=docker.service
        BindIPv6Only=both

        [Install]
        WantedBy=sockets.target
    - name: consul-server.service
      command: start
      content: |
        [Unit]
        Description=Consul Server Agent
        Requires=docker.service
        After=docker.service

        [Service]
        ExecStartPre=-/usr/bin/docker kill consul
        ExecStartPre=-/usr/bin/docker rm consul
        ExecStartPre=/usr/bin/docker pull benschw/consul
        ExecStart=/bin/bash -c 'docker run --name consul -h %H -v /mnt/consul-data:/data -v /mnt/consul-services:/service-config -p $public_ipv4:8300:8300 -p $public_ipv4:8301:8301 -p $public_ipv4:8301:8301/udp -p $public_ipv4:8302:8302 -p $public_ipv4:8302:8302/udp -p $public_ipv4:8400:8400 -p $public_ipv4:8500:8500 -p $public_ipv4:53:53 -p $public_ipv4:53:53/udp benschw/consul agent -server -config-dir=/config -config-dir=/service-config -advertise $public_ipv4 -data-dir /data -bootstrap-expect 3 $(/etc/systems/scripts/consul-join-args)'
        ExecStartPost=/usr/bin/etcdctl set consul.io/nodes/%m $public_ipv4
        ExecReload=/usr/bin/docker kill -s HUP consul
        ExecStop=/usr/bin/etcdctl rm consul.io/nodes/%m
        ExecStop=/usr/bin/docker stop consul
        Restart=on-failure
        RestartSec=20s

        [Install]
        WantedBy=multi-user.target
    - name: srv-router.service
      command: start
      content: |
        [Unit]
        Description=SRV router load balancer
        Requires=docker.service
        After=docker.service

        [Service]
        Restart=always
        RestartSec=5
        ExecStartPre=-/usr/bin/docker rm -f srv-router
        ExecStart=/usr/bin/docker run --net host -t --name srv-router  -e "NS_IP=$public_ipv4" -e "NS_PORT=53" -e "DOMAINS=edge" -e "TARGET=service.consul" vlipco/srv-router
        ExecStop=/usr/bin/docker stop srv-router

        [Install]
        WantedBy=multiuser.target
    - name: consul-ui@.service
      command: start
      content: |
        RestartSec=20s
        [Unit]
        Description=Consul Web UI
        After=docker.service
        Requires=docker.service

        [Service]
        TimeoutStartSec=0
        ExecStartPre=-/usr/bin/docker kill consul-ui-%i
        ExecStartPre=-/usr/bin/docker rm consul-ui-%i
        ExecStartPre=/usr/bin/docker pull benschw/consul-ui
        ExecStart=/bin/bash -c 'docker run --name consul-ui-%i -p 8500 -p 8300 -p 8300/udp benschw/consul-ui agent -node %H-ui -config-dir=/config -ui-dir /ui -data-dir /data $(/etc/systems/scripts/consul-join-args)'
        ExecStartPost=/bin/sleep 1
        ExecStartPost=/etc/systems/scripts/webapp register 8500 consul-ui consul-ui-%i
        ExecStop=/etc/systems/scripts/webapp deregister 8500 consul-ui consul-ui-%i
        ExecStop=/bin/sleep 5
        ExecStop=/usr/bin/docker stop consul-ui-%i

        [X-Fleet]
        Conflicts=consul-ui@*.service
    - name: myapp@.service
      command: start
      content: |
        RestartSec=20s
        [Unit]
        Description=My App
        After=docker.service
        Requires=docker.service

        [Service]
        TimeoutStartSec=0
        ExecStartPre=-/usr/bin/docker kill myapp-%i
        ExecStartPre=-/usr/bin/docker rm myapp-%i
        ExecStartPre=/usr/bin/docker pull benschw/app
        ExecStart=/usr/bin/docker run --name myapp-%i -p 8080 benschw/app
        ExecStartPost=/bin/sleep 1
        ExecStartPost=/etc/systems/scripts/webapp register 8080 myapp myapp-%i
        ExecStop=/etc/systems/scripts/webapp deregister 8080 myapp myapp-%i
        ExecStop=/bin/sleep 5
        ExecStop=/usr/bin/docker stop myapp-%i

        [X-Fleet]
        Conflicts=myapp@*.service
  update:
    group: alpha
    reboot-strategy: off

write_files:
  - path: /etc/systems/scripts/consul-join-args
    permissions: 0755
    owner: root
    content: |
        #!/bin/bash

        etcdctl ls /consul.io/nodes > /dev/null || etcdctl mkdir /consul.io/nodes > /dev/null
        nodes=($(etcdctl ls /consul.io/nodes))

        if [[ ${#nodes[@]} > 0 ]]; then
            ips=()
            for i in "${nodes[@]}"
            do
                    ips+=($(etcdctl get $i))
            done

            ip_str=$(printf " %s" "${ips[@]}")
            echo "--join ${ip_str:1}"
        fi
  - path: /etc/systems/scripts/webapp
    permissions: 0755
    owner: root
    content: |
        #!/bin/bash

        register() {
            port=$1
            svc_name=$2
            docker_name=$3

            ETH1=`ifconfig | grep -A 1 eth1 | tail -n 1 | awk '{print $2}'`
            PORT_EXT=`docker port $docker_name $port | awk -F: '{print \$2}'`
            
            docker run --rm benschw/service-def-gen -name $svc_name -ip $ETH1 -port $PORT_EXT > /mnt/consul-services/$docker_name.json

            systemctl reload consul-server
        }

        deregister() {
            image=$1
            svc_name=$2
            docker_name=$3

            rm /mnt/consul-services/$docker_name.json
            systemctl reload consul-server
        }

        case $1 in
          register|deregister) "$1" $2 $3 $4;;
        esac

